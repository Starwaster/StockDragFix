// Drag tweaking based on diameter / mass
// Based on work by arkie87. (thanks arkie87!)

// Assign known diameters for specific parts
@PART[fuelTank*]::BEFORE[StockDragFix]
{
	diameter = 1.25
}
@PART[fuelTank*-*]::BEFORE[StockDragFix]
{
	diameter = 2.5
}
@PART[Size3*]::BEFORE[StockDragFix]
{
	diameter = 3.75
}

@PART[SDHI_2.5_*]::BEFORE[StockDragFix]
{
	diameter = 2.5
}
// Decreased mass because
// 33% surface area of Apollo CM
// 17% of volume
// but 80% of its mass. Not good.
@PART[Mark1-2Pod]::BEFORE[StockDragFix]
{
	diameter = 2.5
	@mass = 1.83
}
@PART[mk1pod]::BEFORE[StockDragFix]
{
	diameter = 1.25
}
@PART[KW1m*]::BEFORE[StockDragFix]
{
	diameter = 1.25
}
@PART[KW2m*]::BEFORE[StockDragFix]
{
	diameter = 2.5
}
@PART[KW3m*]::BEFORE[StockDragFix]
{
	diameter = 3.75
}
@PART[KW5m*]::BEFORE[StockDragFix]
{
	diameter = 5.00
}
@PART[KW10m*]::BEFORE[StockDragFix]
{
	diameter = 10.00
}
// Assign All Parts a "Diameter" Field (if they didn't get one in the previous step)
@PART[*]:HAS[#node_stack_bottom[*],~diameter[]]:FOR[StockDragFix]
{
	diameter = #$node_stack_bottom[6]$
	@diameter *= 1.25
}
// If part didn't have a bottom stack node to get diameter one, assume it's a small part.
@PART[*]:HAS[~node_stack_bottom[],~diameter[]]:AFTER[StockDragFix]
{
	diameter = 0.625
}


// Calculate Drag Coefficients
@PART[*]:HAS[#diameter[*],~PhysicsSignificance[1]]:AFTER[StockDragFix]
{
	@minimum_drag *= 0.098175
	@minimum_drag *= #$diameter$
	@minimum_drag *= #$diameter$
	@minimum_drag /= #$mass$
	
	@maximum_drag *= 0.098175
	@maximum_drag *= #$diameter$
	@maximum_drag *= #$diameter$
	@maximum_drag /= #$mass$
}
@PART[*]:HAS[#PhysicsSignificance[1],~node_stack_bottom[],~node_stack_top[]]:AFTER[StockDragFix]
{
	%maximum_drag = 0.0001
	%minimum_drag = 0.0001
}

//@PART[*]:HAS[#diameter[*]]:AFTER[StockDragFix]
//{
//	area = #$diameter$
//	@area ^= 2.0
//	@area *= 0.7853981634
//	@area /= 0.008
//	
//	@maximum_drag *= 0.098175 // 0.317203425
//	@maximum_drag *= #$area$
//	@maximum_drag /= #$mass$
//}

//q? 1.83 10–4 V3 ?
//rnose
//-----------
// -0.5 * FlightGlobals.DragMultiplier * realDragCoefficient * AirDensity(pos) * airVel.sqrMagnitude * airVel.normalized;